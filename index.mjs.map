{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport Complex64 from '@stdlib/complex-float32';\nimport full from '@stdlib/array-full';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar Z128 = new Complex128( NaN, NaN );\nvar Z64 = new Complex64( NaN, NaN );\nvar DTYPES = [ 'float64', 'float32', 'complex128', 'complex64', 'generic' ];\n\n\n// MAIN //\n\n/**\n* Creates an array filled with NaNs and having a specified length.\n*\n* @param {NonNegativeInteger} length - array length\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a supported data type\n* @returns {(TypedArray|Array|ComplexArray)} array or typed array\n*\n* @example\n* var arr = nans( 2 );\n* // returns <Float64Array>[ NaN, NaN ]\n*\n* @example\n* var arr = nans( 2, 'float32' );\n* // returns <Float32Array>[ NaN, NaN ]\n*/\nfunction nans( length ) {\n\tvar dtype;\n\tvar value;\n\n\tif ( arguments.length > 1 ) {\n\t\tdtype = arguments[ 1 ];\n\t\tif ( DTYPES.indexOf( dtype ) === -1 ) {\n\t\t\tthrow new TypeError( format( '1ZnGN,Mn', DTYPES.join( '\", \"' ), dtype ) );\n\t\t}\n\t} else {\n\t\tdtype = 'float64';\n\t}\n\tif ( dtype === 'complex128' ) {\n\t\tvalue = Z128;\n\t} else if ( dtype === 'complex64' ) {\n\t\tvalue = Z64;\n\t} else {\n\t\tvalue = NaN;\n\t}\n\treturn full( length, value, dtype );\n}\n\n\n// EXPORTS //\n\nexport default nans;\n"],"names":["Z128","Complex128","NaN","Z64","Complex64","DTYPES","nans","length","dtype","arguments","indexOf","TypeError","format","join","full"],"mappings":";;0WA8BA,IAAIA,EAAO,IAAIC,EAAYC,IAAKA,KAC5BC,EAAM,IAAIC,EAAWF,IAAKA,KAC1BG,EAAS,CAAE,UAAW,UAAW,aAAc,YAAa,WAsBhE,SAASC,EAAMC,GACd,IAAIC,EAGJ,GAAKC,UAAUF,OAAS,GAEvB,GADAC,EAAQC,UAAW,IACe,IAA7BJ,EAAOK,QAASF,GACpB,MAAM,IAAIG,UAAWC,EAAQ,WAAYP,EAAOQ,KAAM,QAAUL,SAGjEA,EAAQ,UAST,OAAOM,EAAMP,EAPE,eAAVC,EACIR,EACa,cAAVQ,EACHL,EAEAD,IAEmBM,EAC7B"}